<?php

namespace App\Models;

use App\Enums\UserEnum;
use ChristianKuri\LaravelFavorite\Traits\Favoriteability;
use Illuminate\Support\Str;
use App\Enums\FriedRequestEnum;
use Laravel\Sanctum\HasApiTokens;
use Spatie\MediaLibrary\HasMedia;
use Illuminate\Support\Facades\DB;
use Laravel\Sanctum\NewAccessToken;
use App\Traits\HasProfileImageTrait;
use App\Traits\HandleTransactionTrait;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Notifications\Notifiable;
use App\Http\Resources\User\UserResource;
use Spatie\MediaLibrary\InteractsWithMedia;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements HasMedia
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles, InteractsWithMedia, HasProfileImageTrait, HandleTransactionTrait, Favoriteability;

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'current_points' => 'integer',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($user) {
            $user->invitation_code = uniqid();
        });

    }


    public function country(): BelongsTo
    {
        return $this->belongsTo(Country::class);
    }

    public function governorate(): BelongsTo
    {
        return $this->belongsTo(Governorate::class);
    }

    public function registerMediaCollections(): void
    {
        $this->addMediaCollection(UserEnum::USER_PROFILE_COLLECTION_NAME->value)->singleFile();
    }

    public function getAuthResource(): array
    {
        return [
            'access_token' => $this->createToken('user_access_token_' . Str::random(10))->plainTextToken,
            'user' => UserResource::make($this),
        ];
    }

    public function createToken(string $name, array $abilities = ['*']): NewAccessToken
    {
        $token = $this->tokens()->create([
            'name' => $name,
            'token' => hash('sha256', $plainTextToken = Str::random(150)),
            'abilities' => $abilities,
        ]);

        return new NewAccessToken($token, $token->getKey() . '|' . $plainTextToken);
    }

    public function isOrdinaryFriendToSeller($seller_id): bool
    {
        return DB::table('friend_requests')
            ->where('user_id', $this->id)
            ->where('seller_id', $seller_id)
            ->where('friend_request_accepted_from_seller', 1)
            ->where('friendship_type', FriedRequestEnum::ORDINARY->name)
            ->exists();
    }

    public function isSpecialFriendToSeller($seller_id): bool
    {
        return DB::table('friend_requests')
            ->where('user_id', $this->id)
            ->where('seller_id', $seller_id)
            ->where('friend_request_accepted_from_seller', 1)
            ->where('friendship_type', FriedRequestEnum::SPECIAL->name)
            ->exists();
    }

    public function orders(): HasMany
    {
        return $this->hasMany(Order::class);
    }

    public function friends(): HasMany
    {
        return $this->hasMany(FriendRequest::class);
    }
}
